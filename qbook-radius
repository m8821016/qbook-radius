#!/bin/sh

# exit code
E_SUCCESS=0
E_FAILED=1
E_NOT_FOUND=2

# environment
_self="${0##*/}"
IMAGE_TAG=qbook-radius
QBOOK_RADIUS=/home/maxlee/projects/qbook-radius/

# Reset
Color_Off="\033[0m"       # Text Reset

# Regular Colors
Black="\033[0;30m"        # Black
Red="\033[0;31m"          # Red
Green="\033[0;32m"        # Green
Yellow="\033[0;33m"       # Yellow
Blue="\033[0;34m"         # Blue
Purple="\033[0;35m"       # Purple
Cyan="\033[0;36m"         # Cyan
White="\033[0;37m"        # White


title() {
  echo   "                                        "                                          
  echo   "  _. |_   _   _  |    ._ _.  _| ${Red}o${Color_Off}      _"
cecho b  " (_| |_) (_) (_) |<   | (_| (_| | |_| _>"
cecho r  "   |                                    "
cecho gr " be easy, strong and good     - m8821016" 
cecho gr " --"
}

cecho() {
  local code="\033["
  case "$1" in
    black  | bk) color="${code}0;30m";;
    red    |  r) color="${code}1;31m";;
    green  |  g) color="${code}1;32m";;
    yellow |  y) color="${code}1;33m";;
    blue   |  b) color="${code}1;34m";;
    purple |  p) color="${code}1;35m";;
    cyan   |  c) color="${code}1;36m";;
    gray   | gr) color="${code}0;37m";;
    *) local text="$1"
  esac
  [ -z "$text" ] && local text="$color$2${code}0m"
  echo "$text"
}

VALID_ARGS=",stop,start,restart,status,"

main() {
  echo $VALID_ARGS | grep -q ",$1,"
  if [ $? != 0 ]; then
    echo  "Wrong or missed arguments!!"
    cecho r "Usage: $_self [stop|start|restart|status]"
    exit $E_NOT_FOUND
  fi

  title
  case $1 in
  stop)
    stop && remove && prune
    status
    ;;
  start)
    build && run
    status
    ;;
  restart)
    stop && remove
    build && run
    status
    ;;
  status)
    status
    ;;
  esac
}

hasImage() {
  if [ ! -n $1 ] && [ `docker images -aq $1 | wc -l` -gt 0 ]; then
    return $E_SUCCESS
  fi
  
  if [ `docker images -aq | wc -l` -gt 0 ]; then
    return $E_SUCCESS
  fi
  
  return $E_NOT_FOUND
}

hasContainer() {
  if [ ! -n $1 ] && [ `docker ps -aqf ancestor="$1" | wc -l` -gt 0 ]; then
    return $E_SUCCESS
  fi

  if [ `docker ps -aq | wc -l` -gt 0 ]; then
    return $E_SUCCESS
  fi

  return $E_NOT_FOUND
}

stop() {
  cecho y "\nStop containers: $IMAGE_TAG"

  hasContainer $IMAGE_TAG
  retStatus=$?
  if [ ! $retStatus -eq $E_SUCCESS  ]; then
    echo "No container $IMAGE_TAG found."
    return $E_NOT_FOUND
  fi

  docker stop $(docker ps -aqf ancestor=$IMAGE_TAG)
  docker rm $(docker ps -aqf ancestor=$IMAGE_TAG)

  hasContainer $IMAGE_TAG
  retStatus=$?
  if [ $retStatus -eq $E_SUCCESS  ]; then
    docker ps -a
    cecho r "\nCan't stop or remove container $IMAGE_TAG"
    return $E_FAILED
  fi
  
  return $E_SUCCESS
}

remove() {
  cecho y "\nRemove image: $IMAGE_TAG"

  hasImage $IMAGE_TAG
  retStatus=$?
  if [ ! $retStatus -eq $E_SUCCESS ]; then
    echo "No images found."
    return $E_NOT_FOUND
  fi

  docker image rm $(docker images -aq $IMAGE_TAG)

  hasImage $IMAGE_TAG
  retStatus=$?
  if [ ! $retStatus -eq $E_SUCCESS ]; then
    docker ps -a
    cecho r "Can't remove image $IMAGE_TAG."
    return $E_FAILED
  fi

  return $E_SUCCESS
}

prune() {
  cecho y "\nPrune unused image"
  docker container prune -f
  return $E_SUCCESS
}

build() {
  cecho y "\nBuild image: $IMAGE_TAG"

  if [ ! -d $QBOOK_RADIUS ]; then
    echo "No directory $QBOOK_RADIUS found."
    return $E_NOT_FOUND
  fi

  cd $QBOOK_RADIUS
  docker build -t $IMAGE_TAG .

  return $E_SUCCESS
}

run() {
  cecho y "\nRun image: $IMAGE_TAG"
  docker run --privileged --name $IMAGE_TAG -p 1812:1812/udp -p 1813:1813 -d $IMAGE_TAG -X
  return $E_SUCCESS
}

status() {
  hasImage && {
    cecho y "\nResult: (images)"
    echo    "----------------"
    docker images -a
  } 

  hasContainer && {
    cecho y "\nResult: (containers)"
    echo    "--------------------"
    docker ps -a
  }
  echo 
}

main $*
